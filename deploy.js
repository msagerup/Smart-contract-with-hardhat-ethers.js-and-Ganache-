const { ethers } = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
  console.log(ethers.JsonRpcProvider);
  const provider = new ethers.providers.JsonRpcProvider(
    process.env.PROVIDER_URL
  );
  // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  const encryptedJsonKey = fs.readFileSync("encryptedKey.json", "utf8");

  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJsonKey,
    process.env.PRIVATE_KEY_PASSWORD
  );

  wallet = await wallet.connect(provider);

  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );

  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying contract...");
  const contract = await contractFactory.deploy();
  await contract.deployTransaction.wait(1);

  const favoriteNumber = await contract.read();
  console.log(`current favorite number: ${favoriteNumber.toString()}`);

  const transactionResonse = await contract.store("784");

  await transactionResonse.wait(1);
  const newFavoriteNumber = await contract.read();
  console.log(`new favorite number: ${newFavoriteNumber.toString()}`);

  // console.log("Here is the deployment transaction: ");
  // console.log(contract.deployTransaction);
  // console.log("Here is the transaction receipt: ");
  // console.log({ transactionReciept });

  // console.log("Deply with only transaction data!");

  // const nonce = await wallet.getTransactionCount();
  // const chainId = await wallet.getChainId();
  // const tx = {
  //   nonce,
  //   gasPrice: 20000000000,
  //   gasLimit: 1000000,
  //   to: null,
  //   value: 0,
  //   data:
  //     "0x" +
  //     "6080604052607b60005534801561001557600080fd5b506108d5806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636057361d1161005b5780636057361d146100ee5780636f760f411461010a5780638bab8dd5146101265780639e7a13ad146101565761007d565b80631ed3d44014610082578063471f7cdf146100b257806357de26a4146100d0575b600080fd5b61009c600480360381019061009791906105af565b610187565b6040516100a9919061066c565b60405180910390f35b6100ba610227565b6040516100c791906106be565b60405180910390f35b6100d861022d565b6040516100e591906106be565b60405180910390f35b610108600480360381019061010391906105af565b610236565b005b610124600480360381019061011f9190610553565b610240565b005b610140600480360381019061013b919061050a565b6102f8565b60405161014d91906106be565b60405180910390f35b610170600480360381019061016b91906105af565b610326565b60405161017e92919061068e565b60405180910390f35b600260205280600052604060002060009150905080546101a6906107a2565b80601f01602080910402602001604051908101604052809291908181526020018280546101d2906107a2565b801561021f5780601f106101f45761010080835404028352916020019161021f565b820191906000526020600020905b81548152906001019060200180831161020257829003601f168201915b505050505081565b60005481565b60008054905090565b8060008190555050565b60036040518060400160405280848152602001838152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908051906020019061029c9291906103e2565b50602082015181600101555050806001836040516102ba9190610655565b908152602001604051809103902081905550816002600083815260200190815260200160002090805190602001906102f39291906103e2565b505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6003818154811061033657600080fd5b9060005260206000209060020201600091509050806000018054610359906107a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610385906107a2565b80156103d25780601f106103a7576101008083540402835291602001916103d2565b820191906000526020600020905b8154815290600101906020018083116103b557829003601f168201915b5050505050908060010154905082565b8280546103ee906107a2565b90600052602060002090601f0160209004810192826104105760008555610457565b82601f1061042957805160ff1916838001178555610457565b82800160010185558215610457579182015b8281111561045657825182559160200191906001019061043b565b5b5090506104649190610468565b5090565b5b80821115610481576000816000905550600101610469565b5090565b6000610498610493846106fe565b6106d9565b9050828152602081018484840111156104b4576104b3610868565b5b6104bf848285610760565b509392505050565b600082601f8301126104dc576104db610863565b5b81356104ec848260208601610485565b91505092915050565b60008135905061050481610888565b92915050565b6000602082840312156105205761051f610872565b5b600082013567ffffffffffffffff81111561053e5761053d61086d565b5b61054a848285016104c7565b91505092915050565b6000806040838503121561056a57610569610872565b5b600083013567ffffffffffffffff8111156105885761058761086d565b5b610594858286016104c7565b92505060206105a5858286016104f5565b9150509250929050565b6000602082840312156105c5576105c4610872565b5b60006105d3848285016104f5565b91505092915050565b60006105e78261072f565b6105f1818561073a565b935061060181856020860161076f565b61060a81610877565b840191505092915050565b60006106208261072f565b61062a818561074b565b935061063a81856020860161076f565b80840191505092915050565b61064f81610756565b82525050565b60006106618284610615565b915081905092915050565b6000602082019050818103600083015261068681846105dc565b905092915050565b600060408201905081810360008301526106a881856105dc565b90506106b76020830184610646565b9392505050565b60006020820190506106d36000830184610646565b92915050565b60006106e36106f4565b90506106ef82826107d4565b919050565b6000604051905090565b600067ffffffffffffffff82111561071957610718610834565b5b61072282610877565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561078d578082015181840152602081019050610772565b8381111561079c576000848401525b50505050565b600060028204905060018216806107ba57607f821691505b602082108114156107ce576107cd610805565b5b50919050565b6107dd82610877565b810181811067ffffffffffffffff821117156107fc576107fb610834565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61089181610756565b811461089c57600080fd5b5056fea2646970667358221220209b298c5a2e5a09a27f4b516a01638f197a0e8f55ee16cc6c6e36dc59d8a45a64736f6c63430008070033",
  //   chainId,
  // };
  // const sendTxResponse = await wallet.sendTransaction(tx);
  // await sendTxResponse.wait(1);
  // console.log(sendTxResponse);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
